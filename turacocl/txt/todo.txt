----------------------------------------
                    Turaco CL to-do list


Future work:

    _ merge the old drivers with the new

    _ Make a version that is a GIMP file importer and exporter
	NOTE: deferred to ImageMagick instead. 
		refer to pngio.c for details.

    _ palette rom tools
	- palette rom to PPM
	- PPM to palette ROM

GN:

A CLUT is an array of palette structures, each of which
 is comprised of 4 colors (2 bit-planes).
Within a CLUT, individual RGB colors of a given palette element are 
 represented by a 1-byte index into a separate palette PROM.
The CLUT PROM provides 32 palettes for each of Bank 1 (characters) and 
 Bank 2 (sprites). 
The palette PROM provides 16 RGB colors (3-3-2) for each of Bank 1 (character tiles) 
 and Bank 2 (sprite tiles) total of 32 palette elements.

For each tile, a color attribute byte is stored, which is the index into the CLUT 
 to be used. Hardware decodes from the CLUT to the 
 palette PROM and then drives the circuitry of the RGB display.

Upfront work is to generate a PCX with '-pal n' for entire range of 
 color attributes used by both banks  e.g. :
 
 turacocl  -inf ROM -bnk 1 -pal 1 -iod "gal_imgs" -dbf gal2_1.pcx   # etc. etc.

-pal selects the color attribute (palette) by which the generated PCX 
 image will derive the 4 colors of its palette. 

   == ROM to IMG ==   (-inf ROM)
	-dbf BankImageFile       Force this filename for the bank image


ROMs are generated from images as follows, but it doesn't matter 
which PCX is used, as the ROM data is irrespective of the image (but
see below for idea of outputting palette colors ...). :
 turacocl  -inf IMG -bnk 2 -pal 1 -img "gal_imgs" -??? gal2_${n}.pcx

Use a shell script to do the following:

For each PCX file:
 turacocl  -inf IMG -bnk 2 -pal 1  -img "images"
    (Turaco shall dump 4 colors of pcx palette to stdout )
 For each rgb of palette,
   Pack rgb  into 3-3-2 byte.
   Search the 3-3-2 byte from color_prom.s (text in ASM format)
     If 3-3-2 byte found in PROM,  index = found_index 
     Else, 
       Append 3-3-2 byte to color_prom.s
       Index = appended_index
   Append index of color onto CLUT entry.  



The following script will create an individual PCX for each palette.
After editting a tile in a PCX file, you would need to convert to ROM
 and then re-run this script to propogate your tile change into all
the palette images.



#!/bin/bash


# there actually needs to be 64 palettes (32 tiles, 32 sprites)
t=32

[ ! -d images ] && mkdir images


[ -f "colors1.dmp" ] && rm colors1.dmp 
echo ".area CSEG00" > colors1.s

for n in `seq 1 $t`; do
   TDRIVERS=../turaco-drivers/ ./turacocl  -drv galaganm -inf IMG -bnk 1 -pal $n  -img images \
           |  sed -n '/^##/p'  | sed 's/^##//' >> colors1.dmp
done

cat colors1.dmp | sort -u | sed 's/^/.db /' >> colors1.s




[ -f "colors1.dmp" ] && rm colors1.dmp 




[ -f "colors2.dmp" ] && rm colors2.dmp 

for n in `seq 1 $t`; do
   TDRIVERS=../turaco-drivers/ ./turacocl  -drv galaganm -inf IMG -bnk 2 -pal $n  -img images \
        |  sed -n '/^##/p'  | sed 's/^##//'  >> colors2.dmp
done

[ -f "colors2.tmp" ] && rm colors2.tmp 

for n in `seq 1 16`; do echo ".db 0x00" >> colors2.tmp; done  # max amount of padding 
cat colors2.dmp | sort -u  | sed 's/^/.db /' >> colors2.tmp
# echo "0x00, 0x00, 0xC0, 0xC5 ...  >> colors2.tmp   ... make a test file
cat colors2.tmp |  sort -r   | head -n16 > colors2.s  # reverse and crop     (HELP sort -r ??? )
#[ -f "colors2.tmp" ] && rm colors2.tmp 

# make a test file
#echo "0xF6,0x07,0x3F,0x27,0x00,0xC7,0xF8,0xE8,0x00,0x38,0x00,0xD8,0xC5,0xC0,0x00,0x00," | sed 's/0x/.db /g' | sed 's/,/\n/g'  > colors2.s


[ -f "clut2.s" ] && rm clut2.s 

# index needs to be adjusted for 0-base !
while read C
do
#  grep -n $C colors2.s | sed 's/:.*$//' |  xargs   printf ".db 0x%02X  ; $C \n"  >> clut2.s
 let N=`grep -n $C colors2.s  | sed 's/:.*$//'`-1 
 echo $N | xargs   printf ".db 0x%02X  ; $C \n"  >> clut2.s
done < colors2.dmp

# [ -f "colors2.dmp" ] && rm colors2.dmp 

# insert into asm file #    echo ".area CSEG01" > colors2.s


#
# asez80  -a -o colors1.s
# asez80  -a -o colors2.s
# aslink  -i -m -w -b CSEG00=0x0000 -b CSEG01=0x0010  5n   colors1.rel   colors2.rel 
# hmmm ... nice but I believe the resulting palette will be backwards ;(
# srec_cat  5n.i86 -intel -fill 0xff 0x0 32 -offset -0x0000 -o _5n.bin -Binary
#
